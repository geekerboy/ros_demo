// Generated by gencpp from file ros_demo/dishGoal.msg
// DO NOT EDIT!


#ifndef ROS_DEMO_MESSAGE_DISHGOAL_H
#define ROS_DEMO_MESSAGE_DISHGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_demo
{
template <class ContainerAllocator>
struct dishGoal_
{
  typedef dishGoal_<ContainerAllocator> Type;

  dishGoal_()
    : disher_id(0)  {
    }
  dishGoal_(const ContainerAllocator& _alloc)
    : disher_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _disher_id_type;
  _disher_id_type disher_id;





  typedef boost::shared_ptr< ::ros_demo::dishGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_demo::dishGoal_<ContainerAllocator> const> ConstPtr;

}; // struct dishGoal_

typedef ::ros_demo::dishGoal_<std::allocator<void> > dishGoal;

typedef boost::shared_ptr< ::ros_demo::dishGoal > dishGoalPtr;
typedef boost::shared_ptr< ::ros_demo::dishGoal const> dishGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_demo::dishGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_demo::dishGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_demo::dishGoal_<ContainerAllocator1> & lhs, const ::ros_demo::dishGoal_<ContainerAllocator2> & rhs)
{
  return lhs.disher_id == rhs.disher_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_demo::dishGoal_<ContainerAllocator1> & lhs, const ::ros_demo::dishGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_demo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_demo::dishGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_demo::dishGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_demo::dishGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_demo::dishGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_demo::dishGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_demo::dishGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_demo::dishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "365a1cd92613b4c18eac2b0ffe4e5f20";
  }

  static const char* value(const ::ros_demo::dishGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x365a1cd92613b4c1ULL;
  static const uint64_t static_value2 = 0x8eac2b0ffe4e5f20ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_demo::dishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_demo/dishGoal";
  }

  static const char* value(const ::ros_demo::dishGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_demo::dishGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"uint32 disher_id\n"
;
  }

  static const char* value(const ::ros_demo::dishGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_demo::dishGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.disher_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dishGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_demo::dishGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_demo::dishGoal_<ContainerAllocator>& v)
  {
    s << indent << "disher_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.disher_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_DEMO_MESSAGE_DISHGOAL_H
